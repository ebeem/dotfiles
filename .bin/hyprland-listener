#!/usr/bin/guile \
-e main -s
!#

(use-modules (ice-9 popen)
             (ice-9 rdelim)
             (srfi srfi-1))

(define WORKSPACES-FORMAT 10)
(define ROWS 3)
(define COLUMNS 3)
(define SOCKET-PATH (string-append "/tmp/hypr/" (getenv "HYPRLAND_INSTANCE_SIGNATURE") "/.socket2.sock"))

(define (main args)
  ;; (write-to-socket SOCKET-PATH "/dispatch fullscreen")
  (read-from-socket SOCKET-PATH))

(define (sublist l offset n)
  (take (drop l offset) n))

(define (fix-arguments-length lst target-length)
  (display "checking fix length\n")
  (cond
   ((< (length lst) target-length)
    (display "list length is less than target-length\n")
    (append lst (make-list (- target-length (length lst)) #f)))
   ((> (length lst) target-length)
    (display "list length is greater than target-length\n")
    (append
     (sublist lst 0 (- target-length 1))
     (list (string-join (sublist lst target-length (- (length lst) target-length)) ","))))
    (else lst)))

(define (call-hook hook params args-count)
  (apply run-hook
         (cons hook
               (fix-arguments-length params args-count))))

(define (write-to-socket socket-path cmd)
  (let ((sock (socket AF_UNIX SOCK_STREAM)))
    (socket-connect! sock socket-path)
    (socket-send! sock (string->utf8 cmd))
    (let ((resp (socket-recv! sock 100)))
      (if (not (equal? resp (string->utf8 "ok")))
          (error (string-append "Hyprland Error: " cmd " : " resp))))
    (socket-close sock)))

;; (define (write-to-socket socket-path data)
;;   (call-with-output-file socket-path
;;     (lambda (port)
;;       (display data port))))

(define (read-from-socket socket-path)
  (let* ((sock (socket AF_UNIX SOCK_STREAM 0))
         (sock-addr (make-socket-address AF_UNIX socket-path)))
    (connect sock sock-addr)
    (let loop ()
      (let ((data (read-line sock)))
        (if (eof-object? data)
            (begin
              (close-port sock)
              (display "Connection closed\n"))
            (begin
              (let* ((command-id (substring data 0 (string-index data #\>)))
                     (params (string-split (substring data (+ 2 (string-index data #\>))) #\,)))
                (display data)
                (newline)
                (display command-id)
                (newline)
                (display params)
                (newline)
                (cond
                  ((string=? command-id "workspace") (call-hook workspace-changed-hook params 1))
                  ((string=? command-id "workspacev2") (call-hook workspace-changed-v2-hook params 2))
                  ((string=? command-id "focusedmon") (call-hook monitor-changed-hook params 2))
                  ((string=? command-id "activewindow") (call-hook window-changed-hook params 2))
                  ((string=? command-id "activewindowv2") (call-hook window-changed-v2-hook params 1))
                  ((string=? command-id "fullscreen") (call-hook fullscreen-hook params 1))
                  ((string=? command-id "monitorremoved") (call-hook monitor-removed-hook params 1))
                  ((string=? command-id "monitoradded") (call-hook monitor-added-hook params 1))
                  ((string=? command-id "monitoraddedv2") (call-hook monitor-added-v2-hook params 3))
                  ((string=? command-id "createworkspace") (call-hook workspace-created-hook params 1))
                  ((string=? command-id "createworkspacev2") (call-hook workspace-created-v2-hook params 2))
                  ((string=? command-id "destroyworkspace") (call-hook workspace-destoryed-hook params 1))
                  ((string=? command-id "destroyworkspacev2") (call-hook workspace-destroyed-v2-hook params 2))
                  ((string=? command-id "moveworkspace") (call-hook workspace-moved-hook params 2))
                  ((string=? command-id "moveworkspacev2") (call-hook workspace-moved-v2-hook params 3))
                  ((string=? command-id "renameworkspace") (call-hook workspace-renamed-hook params 2))
                  ((string=? command-id "activespecial") (call-hook workspace-special-change-hook params 2))
                  ((string=? command-id "activelayout") (call-hook layout-change-hook params 2))
                  ((string=? command-id "openwindow") (call-hook window-open-hook params 4))
                  ((string=? command-id "closewindow") (call-hook window-close-hook params 1))
                  ((string=? command-id "movewindow") (call-hook window-move-hook params 2))
                  ((string=? command-id "movewindowv2") (call-hook window-move-v2-hook params 3))
                  ((string=? command-id "openlayer") (call-hook layer-open-hook params 1))
                  ((string=? command-id "closelayer") (call-hook layer-close-hook params 1))
                  ((string=? command-id "submap") (call-hook submap-hook params 1))
                  ((string=? command-id "changefloatingmode") (call-hook floating-mode-change-hook params 2))
                  ((string=? command-id "urgent") (call-hook window-urgent-hook params 1))
                  ((string=? command-id "minimize") (call-hook window-minimize-hook params 2))
                  ((string=? command-id "screencast") (call-hook screencast-hook params 2))
                  ((string=? command-id "windowtitle") (call-hook window-title-change-hook params 1))
                  ((string=? command-id "ignoregrouplock") (call-hook ignore-group-lock-toggled-hook params 1))
                  ((string=? command-id "lockgroups") (call-hook-hook params 1))
                  ((string=? command-id "configreloaded") (call-hook config-reloaded-hook params 0))
                  ((string=? command-id "pin") (call-hook window-pin-changed-hook params 2))
                  (else (begin
                          (display "Unknown command")
                          (newline))))

                (loop))))))))

(define workspace-changed-hook
  ;; workspace: emitted on workspace change. Is emitted ONLY when a user requests a workspace change,
  ;; and is not emitted on mouse movements (see activemon).

  ;; Parameters:
  ;;   - arg1: workspace-name.
  (make-hook 1))

(define workspace-changed-v2-hook
  ;; workspacev2: emitted on workspace change. Is emitted ONLY when a user requests a workspace change,
  ;; and is not emitted on mouse movements (see activemon).

  ;; Parameters:
  ;;   - arg1: workspace-id
  ;;   - arg2: workspace-name
  (make-hook 2))

(define monitor-changed-hook
  ;; focusedmon: emitted on the active monitor being changed.

  ;; Parameters:
  ;;   - arg1: monitor-name
  ;;   - arg2: workspace-name
  (make-hook 2))

(define window-changed-hook
  ;; activewindow: emitted on the active window being changed.

  ;; Parameters:
  ;;   - arg1: window-class
  ;;   - arg2: window-title
  (make-hook 2))

(define window-changed-v2-hook
  ;; activewindowv2: emitted on the active window being changed.

  ;; Parameters:
  ;;   - arg1: window-address
  (make-hook 1))

(define fullscreen-hook
  ;; fullscreen: emitted when a fullscreen status of a window changes.

  ;; Parameters:
  ;;   - arg1: 0/1 (exit fullscreen / enter fullscreen)
  (make-hook 1))

(define monitor-removed-hook
  ;; monitorremoved: emitted when a monitor is removed (disconnected).

  ;; Parameters:
  ;;   - arg1: monitor-name
  (make-hook 1))

(define monitor-added-hook
  ;; monitoradded: emitted when a monitor is added (connected).

  ;; Parameters:
  ;;   - arg1: monitor-name
  (make-hook 1))

(define monitor-added-v2-hook
  ;; monitoraddedv2: emitted when a monitor is added (connected).

  ;; Parameters:
  ;;   - arg1: monitor-id
  ;;   - arg2: monitor-name
  ;;   - arg3: monitor-description
  (make-hook 3))

(define workspace-created-hook
  ;; createworkspace: emitted when a workspace is created.

  ;; Parameters:
  ;;   - arg1: workspace-name
  (make-hook 1))

(define workspace-created-v2-hook
  ;; createworkspacev2: emitted when a workspace is created.

  ;; Parameters:
  ;;   - arg1: workspace-id
  ;;   - arg2: workspace-name
  (make-hook 2))

(define workspace-destoryed-hook
  ;; destroyworkspace: emitted when a workspace is destroyed.

  ;; Parameters:
  ;;   - arg1: workspace-name
  (make-hook 1))

(define workspace-destroyed-v2-hook
  ;; destroyworkspacev2: emitted when a workspace is destroyed.

  ;; Parameters:
  ;;   - arg1: workspace-id
  ;;   - arg2: workspace-name
  (make-hook 2))

(define workspace-moved-hook
  ;; moveworkspace: emitted when a workspace is moved to a different monitor.

  ;; Parameters:
  ;;   - arg1: workspace-name
  ;;   - arg2: monitor-name
  (make-hook 2))

(define workspace-moved-v2-hook
  ;; moveworkspacev2: emitted when a workspace is moved to a different monitor.

  ;; Parameters:
  ;;   - arg1: workspace-id
  ;;   - arg2: workspace-name
  ;;   - arg3: monitor-name
  (make-hook 3))

(define workspace-renamed-hook
  ;; renameworkspace: emitted when a workspace is renamed.

  ;; Parameters:
  ;;   - arg1: workspace-id
  ;;   - arg2: workspace-name
  (make-hook 2))

(define workspace-special-change-hook
  ;; activespecial: emitted when the special workspace opened in a monitor changes (closing results in an empty WORKSPACENAME).

  ;; Parameters:
  ;;   - arg1: workspace-name
  ;;   - arg2: monitor-name
  (make-hook 2))

(define layout-change-hook
  ;; activelayout: emitted on a layout change of the active keyboard.

  ;; Parameters:
  ;;   - arg1: keyboard-name
  ;;   - arg2: layout-name
  (make-hook 2))

(define window-open-hook
  ;; openwindow: emitted when a window is opened.

  ;; Parameters:
  ;;   - arg1: window-address
  ;;   - arg2: workspace-name
  ;;   - arg3: window-class
  ;;   - arg4: window-tilte
  (make-hook 4))

(define window-close-hook
  ;; closewindow: emitted when a window is closed.

  ;; Parameters:
  ;;   - arg1: window-address
  (make-hook 1))

(define window-move-hook
  ;; movewindow: emitted when a window is moved to a workspace.

  ;; Parameters:
  ;;   - arg1: window-address
  ;;   - arg2: workspace-name
  (make-hook 2))

(define window-move-v2-hook
  ;; movewindowv2: emitted when a window is moved to a workspace.

  ;; Parameters:
  ;;   - arg1: window-address
  ;;   - arg2: workspace-id
  ;;   - arg3: workspace-name
  (make-hook 3))

(define layer-open-hook
  ;; openlayer: emitted when a layerSurface is mapped.

  ;; Parameters:
  ;;   - arg1: namespace
  (make-hook 1))

(define layer-close-hook
  ;; closelayer: emitted when a layerSurface is unmapped.

  ;; Parameters:
  ;;   - arg1: namespace
  (make-hook 1))

(define submap-hook
  ;; submap: emitted when a keybind submap changes. Empty means default.

  ;; Parameters:
  ;;   - arg1: submap-name
  (make-hook 1))

(define floating-mode-change-hook
  ;; changefloatingmode: emitted when a window changes its floating mode. FLOATING is either 0 or 1.

  ;; Parameters:
  ;;   - arg1: window-address
  ;;   - arg2: floating
  (make-hook 2))

(define window-urgent-hook
  ;; urgent: emitted when a window requests an urgent state.

  ;; Parameters:
  ;;   - arg1: window-address
  (make-hook 1))

(define window-minimize-hook
  ;; minimize: emitted when a window requests a change to its minimized state. MINIMIZED is either 0 or 1.

  ;; Parameters:
  ;;   - arg1: window-address
  ;;   - arg2: minimized
  (make-hook 2))

(define screencast-hook
  ;; screencast: emitted when a screencopy state of a client changes. Keep in mind there might be multiple separate clients. State is 0/1, owner is 0 - monitor share, 1 - window share.

  ;; Parameters:
  ;;   - arg1: state
  ;;   - arg2: owner
  (make-hook 2))

(define window-title-change-hook
  ;; windowtitle: emitted when a window title changes.

  ;; Parameters:
  ;;   - arg1: window-address
  (make-hook 1))

(define ignore-group-lock-toggled-hook
  ;; ignoregrouplock: emitted when ignoregrouplock is toggled.

  ;; Parameters:
  ;;   - arg1: window-address
  (make-hook 1))

(define group-lock-toggled-hook
  ;; lockgroups: emitted when lockgroups is toggled.	0/1.

  ;; Parameters:
  ;;   - arg1: window-address
  (make-hook 1))

(define config-reloaded-hook
  ;; configreloaded: emitted when the config is done reloading.

  ;; Parameters: nil
  (make-hook 0))

(define window-pin-changed-hook
  ;; pin: emitted when a window is pinned or unpinned.

  ;; Parameters:
  ;;   - arg1: window-address
  ;;   - arg2: pin-state
  (make-hook 2))


(add-hook! workspace-changed-v2-hook
           (lambda (workspace-id workspace-name)
             (let* ((current-workspace workspace-id)
                    (current-workspace-group (floor (/ current-workspace WORKSPACES-FORMAT)))
                    (current-workspace-index (modulo current-workspace WORKSPACES-FORMAT))
                    (current-row (floor (/ current-workspace-index COLUMNS)))
                    (current-column (modulo current-workspace-index COLUMNS))
                    (target-row
                      (cond ((equal? direction "up") (- current-row 1))
                            ((equal? direction "down") (+ current-row 1))
                            (else current-row)))
                    (target-column
                      (cond ((equal? direction "left") (- current-column 1))
                            ((equal? direction "right") (+ current-column 1))
                            (else current-column))))
                (+ (* current-workspace-group WORKSPACES-FORMAT)
                  (+ (* COLUMNS (modulo target-row ROWS))
                      (modulo target-column COLUMNS))))))

(add-hook! window-changed-v2-hook (lambda (window-address)
                    (display "changed active window to: ")
                    (display window-address)
                    (newline)))
