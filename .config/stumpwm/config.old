;; -*- lisp -*-
;; #-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(in-package :stumpwm)
(setf *default-package* :stumpwm)
(set-module-dir "/usr/share/stumpwm/contrib/")
(which-key-mode)

;; (swank:create-server
;;  :dont-close t
;;  :port swank::default-server-port)

(ql:quickload :clx-truetype)
(load-module "ttf-fonts")
;; (xft:cache-fonts)
(set-font `(,(make-instance 'xft:font :family "JetBrains Mono" :subfamily "Regular" :size 12 :antialias t)))

(refresh-heads)
(load-module "swm-gaps")
(setf swm-gaps:*head-gaps-size* 0
      swm-gaps:*inner-gaps-size* 5
      swm-gaps:*outer-gaps-size* 10)
(swm-gaps:toggle-gaps-on)
(setq mode-line-default-head (stumpwm::find-head-by-position (current-screen)
                                                (/ (screen-width (current-screen)) 2)
                                                (/ (screen-height (current-screen)) 2)))

(setf header-gap 30)
(setq last-fix-middle-screen-bar-gap t)
(defun fix-middle-screen-bar-gap (fullscreen)
  ;; add gap to middle screen (polybar)
  (when (not (eq last-fix-middle-screen-bar-gap fullscreen))
    (setq last-fix-middle-screen-bar-gap fullscreen)
    (refresh-heads)
    (let* ((head (stumpwm::find-head-by-position (current-screen)
                                                (/ (screen-width (current-screen)) 2)
                                                (/ (screen-height (current-screen)) 2)))
            (height (stumpwm::head-height head))
            (width (stumpwm::head-width head))
            (x (stumpwm::head-x head))
            (y (stumpwm::head-y head))
            (gap (cond ((null fullscreen) header-gap) (t 0)))
            (new-height (- height gap))
            (new-width width))
      (stumpwm::resize-head
        (stumpwm::head-number head)
        x (+ y gap)
        new-width new-height))))

(defun stumpwm::activate-fullscreen (window)
  (fix-middle-screen-bar-gap t)
  (dformat 2 "client requests to go fullscreen~%")
  (add-wm-state (window-xwin window) :_NET_WM_STATE_FULLSCREEN)
  (setf (window-fullscreen window) t)
  (focus-window window))

(defun stumpwm::deactivate-fullscreen (window)
  (fix-middle-screen-bar-gap nil)
  (setf (window-fullscreen window) nil)
  (dformat 2 "client requests to leave fullscreen~%")
  (remove-wm-state (window-xwin window) :_NET_WM_STATE_FULLSCREEN)
  (update-decoration window)
  (update-mode-lines (current-screen)))

;;; Config
(setf *mouse-focus-policy* :click)

;;; Keybinds
(set-prefix-key (kbd "s-SPC"))
(define-key *top-map* (kbd "C-s-r") "loadrc")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec pactl set-sink-volume @DEFAULT_SINK@ -5%")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec pactl set-sink-volume @DEFAULT_SINK@ +5%")
(define-key *top-map* (kbd "XF86AudioMute") "exec pactl set-sink-mute @DEFAULT_SINK@ toggle")
(define-key *top-map* (kbd "XF86AudioNext") "exec mpc next")
(define-key *top-map* (kbd "XF86AudioPrev") "exec mpc prev")
(define-key *top-map* (kbd "XF86AudioPlay") "exec mpc toggle")

(define-key *top-map* (kbd "XF86MonBrightnessUp") "brightnessctl set +10%")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "brightnessctl set 10%-")

(defparameter *groups-rows* 3)
(defparameter *groups-columns* 3)
(defparameter *groups-names* '("1-browser" "2-development" "3-databases" "4-communication" "5-development" "6-gaming" "7-mail" "8-development" "9-media"))

(when *initializing*
  (grename (car *groups-names*))
  (dolist (g (cdr *groups-names*))
    (gnewbg g)))

(defcommand gget-direction (dir)
  (declare (type (member :up :down :left :right) dir))
  (let ((c-row (floor (- (group-number (current-group)) 1) *groups-columns*))
        (c-col (mod (- (group-number (current-group)) 1) *groups-columns*)))
    (ecase dir
      (:left (setq c-col (mod (- c-col 1) *groups-columns*)))
      (:right (setq c-col (mod (+ c-col 1) *groups-columns*)))
      (:up (setq c-row (mod (- c-row 1) *groups-rows*)))
      (:down (setq c-row (mod (+ c-row 1) *groups-rows*))))
    (+ 1 (+ c-col (* c-row *groups-columns*)))))

(defcommand gselect-direction (dir) ((:direction "Direction: "))
  (gselect (write-to-string (gget-direction dir))))

(defcommand gmove-direction (dir) ((:direction "Direction: "))
  (gmove-and-follow (select-group (current-screen) (write-to-string (gget-direction dir)))))

;; Window management
(define-key *top-map* (kbd "s-f") "float-this")
(define-key *top-map* (kbd "s-F") "unfloat-this")

(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-l") "move-focus right")

(define-key *top-map* (kbd "s-H") "move-window left")
(define-key *top-map* (kbd "s-J") "move-window down")
(define-key *top-map* (kbd "s-K") "move-window up")
(define-key *top-map* (kbd "s-L") "move-window right")

(define-key *top-map* (kbd "M-s-h") "exchange-direction left")
(define-key *top-map* (kbd "M-s-j") "exchange-direction down")
(define-key *top-map* (kbd "M-s-k") "exchange-direction up")
(define-key *top-map* (kbd "M-s-l") "exchange-direction right")

(define-key *top-map* (kbd "C-s-h") "gselect-direction left")
(define-key *top-map* (kbd "C-s-j") "gselect-direction down")
(define-key *top-map* (kbd "C-s-k") "gselect-direction up")
(define-key *top-map* (kbd "C-s-l") "gselect-direction right")

(define-key *top-map* (kbd "C-M-s-h") "gmove-direction left")
(define-key *top-map* (kbd "C-M-s-j") "gmove-direction down")
(define-key *top-map* (kbd "C-M-s-k") "gmove-direction up")
(define-key *top-map* (kbd "C-M-s-l") "gmove-direction right")

(define-key *top-map* (kbd "s-RET") "exec emacsclient -c -e '(+eshell/here nil)')")
(define-key *top-map* (kbd "C-s-SPC") "exec rofi -show drun")

(defvar *window-manipulation-map* (make-sparse-keymap))

(defcommand kill-or-delete-window () ()
            (and (delete-window)
                 (remove-split)))

(define-key *top-map* (kbd "s-w") "delete-window")
(define-key *top-map* (kbd "M-s-w") "kill-or-delete-window")
;; (define-key *top-map* (kbd "s-w") *window-manipulation-map*)
;; (let ((map *window-manipulation-map*))
;;   (define-key map (kbd "s-c") "remove-split")
;;   (define-key map (kbd "s-s") "hsplit")
;;   (define-key map (kbd "s-v") "vsplit"))

;; TODO
;; refresh-heads
;; reloa.d
;; loadrc

;; NOTE: init.lisp file
(defun init ()
  (run-shell-command "xset r rate 300 150")
  (run-shell-command "xsettingsd")
  (run-shell-command "picom -b --experimental-backends --dbus")
  (run-shell-command "~/.fehbg")
  (run-shell-command "xrdb ~/.Xresources")

  ;; initialize modeline/polybar
  (run-shell-command "~/.config/polybar/launch.sh")
  ;; (stumpwm::toggle-mode-line (stumpwm::current-screen) (stumpwm::find-head-by-position (current-screen)
  ;;                                               (/ (screen-width (current-screen)) 2)
  ;;                                               (/ (screen-height (current-screen)) 2)))
  ;; startup applications
  ;; (dolist app '("firefox" "emacs" "discord" "slack" "steam-runtime"
  ;;               "gtk-launch 'elfeed'" "gtl-launch 'mu4e'" "gtk-launch 'ement'"
  ;;               "chromium 'https://web.whatsapp.com/'" "ckb-next -b")
  ;;   (sb-thread:make-thread
  ;;     (lambda ()
  ;;       (run-shell-command app))))
  )

(stumpwm:add-hook stumpwm:*start-hook* 'init)

(setf *colors*
      '("#101216"  ; fg
        "#f9a03f"  ; orange
        "#8BD49C"  ; green
        "#8abeb7"  ; cyan
        "#5EC4FF"  ; blue
        "#cc6666"  ; red
        "#E27E8D"  ; magenta
        "#f0c674"  ; yellow
        ))

(update-color-map (current-screen))

(set-focus-color (elt *colors* 4))
(set-unfocus-color (elt *colors* 0))

;;; Modeline
;; (load-module "cpu")
;; (load-module "mpd")
;; (load-module "mem")

;; (setf cpu::*cpu-modeline-fmt*        "%c"
;;       cpu::*cpu-usage-modeline-fmt*  "^f2^f0^[~A~2D%^]"
;;       mem::*mem-modeline-fmt*        "%a%p"
;;       mpd:*mpd-modeline-fmt*         "%a - %t"
;;       mpd:*mpd-status-fmt*           "%a - %t"
;;       *hidden-window-color*          "^**"
;;       *mode-line-highlight-template* "«~A»")

;; (setf *screen-mode-line-format*
;;       (list "^B^3%g ^n^b %W ^>  "
;;             "  %B  %d"
;;             ))
;; load a few modules
;; (mapcar #'load-module '("cpu"
;;                         "mem"
;;                         "battery-portable"
;;                         "net"))

(defparameter *day-names*
  '("Monday" "Tuesday" "Wed" "Thu" "Fri" "Sat" "Sun"))

(defun current-date ()
  "Returns the date formatted as `2009-11-16 Mon 11:34:03'."
  (multiple-value-bind
      (second minute hour date month year day-of-week dst-p tz)
      (get-decoded-time)
    (format nil "~d-~2,'0d-~2,'0d ~a ^B~2,'0d:~2,'0d:~2,'0d^b"
            year month date (nth day-of-week *day-names*)
            hour minute second tz)))

;; FIXME ppp0 comes after lo0; hence, the IP is wrong
(defun current-ip ()
  "Returns the IP address in CIDR notation."
  (run-shell-command
   "IP_ADDRESS=`ifconfig | grep 'inet addr:' | head -n 1 | sed 's/.*addr:\\([0-9.]*\\).*/\\1/'`; NETMASK=`ifconfig | grep 'inet addr:' | head -n 1 | sed 's/.*Mask:\\([0-9.]*\\).*/\\1/'`; NETWORK=`ipcalc -n -b $IP_ADDRESS $NETMASK | grep Network | awk '{print $2}'`; echo -n IP:$IP_ADDRESS`echo $NETWORK | sed 's/.*\\(\\/.*\\)/\\1/g' | tr -d '[:cntrl:]'`"
   t))

(defun current-gw ()
  "Returns the default gateway."
  (run-shell-command
   "echo -n Gw:`ip route show | grep default | awk '{print $3}' | tr -d '[:cntrl:]'`"
   t))

;; (defun ml-locks ()
;;   (defun bool->color (bool)
;;     (if bool "^B^2" ""))
;;   (let ((mods (xlib:device-state-locked-mods
;;                (xlib:get-state *display*))))
;;     (al/ml-separate
;;      (format nil "^[~ACaps^] ^[~ANum^]"
;;              (bool->color (al/mod-lock-state +caps-lock+ mods))
;;              (bool->color (al/mod-lock-state +num-lock+ mods))))))

;; (defun ml-layout ()
;;   (al/ml-separate
;;    (al/ml-string (al/layout-string (al/current-layout)))))

;; (setf *screen-mode-line-format*
;;       (list
;;        ;; date
;;        "^6*" '(:eval (current-date)) ; defined above
;;        ;; cpu | mem | battery
;;        " | %D | %c %C (%f) %t | %M | %B"

;;        ;; ip and gw
;;        " | " '(:eval (current-ip)) " " '(:eval (current-gw)) ; defined above
;;        ;; net | wifi
;;        " | %l | %I"
;;        '(:eval (run-shell-command "echo" t))
;;        "^2*" "[^B%n^b] %W%48"))

;; (load-module "cpu")
;; (load-module "mpd")
;; (load-module "mem")
;; (setf *time-modeline-string* " %A,%d %B %r")
;; (setf *window-format* "%20t - %n")
;; (setf cpu::*cpu-modeline-fmt*        "%c"
;;       cpu::*cpu-usage-modeline-fmt*  "^f2^f0^[~A~2D%^]"
;;       mem::*mem-modeline-fmt*        "%a%p"
;;       mpd:*mpd-modeline-fmt*         "%a - %t"
;;       mpd:*mpd-status-fmt*           "%a - %t"
;;       *hidden-window-color*          "^**"
;;       *mode-line-highlight-template* "«~A»")
;; (setf *screen-mode-line-format*
;;       (list "^B^3 %n %d %c %m"
;;             ""
;;             ))
;; (setf *mode-line-border-width* 0)
;; (setf *mode-line-pad-x* 0)
;; (setf *mode-line-pad-y* 0)
;; (setf *mode-line-background-color* (elt *colors* 0))
;; (setf *mode-line-foreground-color* (elt *colors* 1))
;; (setf *mode-line-timeout* 1)
;; (enable-mode-line (current-screen) mode-line-default-head t)
;; (unless (head-mode-line mode-line-default-head)
;;   (toggle-mode-line (current-screen) mode-line-default-head t))

;; (setf (mode-line-position mode-line) :bottom)
;; (setf *time-modeline-string* "%F %H:%M")
;; (setf *group-format* "%t")
;; (setf *window-format* "")
;; (load-module "battery-portable")
;; (load-module "cpu")
;; (load-module "mpd")
;; (load-module "mem")
;; (setf cpu::*cpu-modeline-fmt*        "%c"
;;       cpu::*cpu-usage-modeline-fmt*  "^f2^f0^[~A~2D%^]"
;;       mem::*mem-modeline-fmt*        "%a%p"
;;       mpd:*mpd-modeline-fmt*         "%a - %t"
;;       mpd:*mpd-status-fmt*           "%a - %t"
;;       *hidden-window-color*          "^**"
;;       *mode-line-highlight-template* "«~A»")
;; (defvar *mode-line-formatter-list*
;;   '(("%g") ("%W") ("^>") ("mu-unread" . t) ("%m") ("%C") ("%M") ("%B") ("%d"))
;;   "List of formatters for the modeline.")
;; (defun generate-modeline (elements &optional not-invertedp rightp)
;;   "Generate a modeline for StumpWM.
;; ELEMENTS should be a list of `cons'es which `car' is the modeline
;; formatter or the shell command to run, and their `cdr' is either nil
;; when the `car' is a formatter and t when it is a shell command."
;;   (when elements
;;     (cons (format nil
;;                   " ^[~A^]^(:bg \"~A\") "
;;                   (format nil "^(:fg \"~A\")^(:bg \"~A\")^f1~A^f0"
;;                           ;; (if (xor not-invertedp rightp) phundrak-nord1 phundrak-nord3)
;;                           ;; (if (xor not-invertedp rightp) phundrak-nord3 phundrak-nord1)
;;                           ;; (if not-invertedp phundrak-nord3 phundrak-nord1)
;;                           (if rightp "" "")))
;;           (let* ((current-element (car elements))
;;                  (formatter       (car current-element))
;;                  (commandp        (cdr current-element)))
;;             (cons (if commandp
;;                       `(:eval (run-shell-command ,formatter t))
;;                     (format nil "~A" formatter))
;;                   (generate-modeline (cdr elements)
;;                                      (not not-invertedp)
;;                                      (if (string= "^>" (caar elements)) t rightp)))))))
;; (defcommand reload-modeline () ()
;;   "Reload modeline."
;;   (setf *screen-mode-line-format*
;;            (cdr (generate-modeline *mode-line-formatter-list*))))
;; ;; (reload-modeline)
;; (stumpwm:enable-mode-line (stumpwm:current-screen)
;;                           (stumpwm::find-head-by-position (current-screen)
;;                                                 (/ (screen-width (current-screen)) 2)
;;                                                 (/ (screen-height (current-screen)) 2)) t)
;; (setf *bar-med-color* "^B^3")
;; (setf *bar-hi-color* "^B^3")
;; (setf *bar-crit-color* "^B^1")

;; (setf *group-format* " %t ")
;; (setf *window-format* " %t ")
;; (setf *mode-line-timeout* 1)
;; (setf *time-modeline-string* "^B^3 %e %b %H:%M ^n")

;; (load-module "cpu")
;; (load-module "cpu")
;; (load-module "mpd")
;; (load-module "mem")

;; (setf cpu::*cpu-modeline-fmt*        "%c"
;;       cpu::*cpu-usage-modeline-fmt*  "^f2^f0^[~A~2D%^]"
;;       mem::*mem-modeline-fmt*        "%a%p"
;;       mpd:*mpd-modeline-fmt*         "%a - %t"
;;       mpd:*mpd-status-fmt*           "%a - %t"
;;       *hidden-window-color*          "^**"
;;       *mode-line-highlight-template* "«~A»")

;; (setf *screen-mode-line-format*
;;       (list "^B^3%g ^n^b %W ^>  "
;;             "  %B  %d"
;;             ))

;; (setf *mode-line-border-width* 0)
;; (setf *mode-line-pad-x* 0)
;; (setf *mode-line-pad-y* 0)
;; (setf *mode-line-background-color* (elt *colors* 0))
;; (setf *mode-line-foreground-color* (elt *colors* 1))


;; (setf *time-modeline-string* "%F %H:%M")
;; (setf *group-format* "%t")
;; (setf *window-format* "%n: %30t")
;; (load-module "battery-portable")
;; (load-module "cpu")
;; (load-module "mpd")
;; (load-module "mem")
;; (setf cpu::*cpu-modeline-fmt*        "%c"
;;       cpu::*cpu-usage-modeline-fmt*  "^f2^f0^[~A~2D%^]"
;;       mem::*mem-modeline-fmt*        "%a%p"
;;       mpd:*mpd-modeline-fmt*         "%a - %t"
;;       mpd:*mpd-status-fmt*           "%a - %t"
;;       *hidden-window-color*          "^**"
;;       *mode-line-highlight-template* "«~A»")
;; (defvar *mode-line-formatter-list*
;;   '(("%g") ("%W") ("^>") ("mu-unread" . t) ("%m") ("%C") ("%M") ("%B") ("%d"))
;;   "List of formatters for the modeline.")
;; (defun generate-modeline (elements &optional not-invertedp rightp)
;;   "Generate a modeline for StumpWM.
;; ELEMENTS should be a list of `cons'es which `car' is the modeline
;; formatter or the shell command to run, and their `cdr' is either nil
;; when the `car' is a formatter and t when it is a shell command."
;;   (when elements
;;     (cons (format nil
;;                   " ^[~A^]^(:bg \"~A\") "
;;                   (format nil "^(:fg \"~A\")^(:bg \"~A\")^f1~A^f0"
;;                           (if (xor not-invertedp rightp) phundrak-nord1 phundrak-nord3)
;;                           (if (xor not-invertedp rightp) phundrak-nord3 phundrak-nord1)
;;                           (if rightp "" ""))
;;                   (if not-invertedp phundrak-nord3 phundrak-nord1))
;;           (let* ((current-element (car elements))
;;                  (formatter       (car current-element))
;;                  (commandp        (cdr current-element)))
;;             (cons (if commandp
;;                       `(:eval (run-shell-command ,formatter t))
;;                     (format nil "~A" formatter))
;;                   (generate-modeline (cdr elements)
;;                                      (not not-invertedp)
;;                                      (if (string= "^>" (caar elements)) t rightp)))))))
;; (defcommand reload-modeline () ()
;;   "Reload modeline."
;;   (sb-thread:make-thread
;;    (lambda ()
;;      (setf *screen-mode-line-format*
;;            (cdr (generate-modeline *mode-line-formatter-list*))))))
;; (reload-modeline)
;; (unless (head-mode-line (stumpwm::find-head-by-position (current-screen)
;;                                                 (/ (screen-width (current-screen)) 2)
;;                                                 (/ (screen-height (current-screen)) 2)))
;;   (stumpwm:toggle-mode-line (stumpwm:current-screen)
;;                           (stumpwm::find-head-by-position (current-screen)
;;                                                 (/ (screen-width (current-screen)) 2)
;;                                                 (/ (screen-height (current-screen)) 2)) t))

;; (in-package :stumpwm)
;; (set-module-dir "/usr/share/stupmwm/contrib/")

;; (defvar al/display-number
;;   (multiple-value-bind (_ array)
;;       (cl-ppcre:scan-to-strings ":([0-9]+)" (getenv "DISPLAY"))
;;     (declare (ignore _))
;;     (if (vectorp array)
;;         (parse-integer (aref array 0))
;;         0))
;;   "The number of the current DISPLAY.")

;; (swank:create-server
;;  :dont-close t
;;  :port (+ swank::default-server-port al/display-number))

;; ;;; Loading additional rc files
;; (defvar al/init-directory
;;   (directory-namestring
;;    (truename (merge-pathnames (user-homedir-pathname)
;;                               ".stumpwmrc")))
;;   "A directory with initially loaded files.")

(defun eb/load (filename)
  "Load a file FILENAME (without extension) from `eb/init-directory'."
  (let ((file (merge-pathnames (concat filename ".lisp")
                               eb/init-directory)))
    (if (probe-file file)
        (load file)
        (format *error-output* "File '~a' doesn't exist." file))))

;; (redirect-all-output (merge-pathnames "log" al/init-directory))

;; (set-module-dir
;;  (pathname-as-directory (concat (getenv "HOME")
;;                                 "/src/stumpwm-contrib")))

(eb/load "init")
(eb/load "groups")
(eb/load "keybindings")
(eb/load "appearance")
;; (al/load "utils")
;; (al/load "xkb")
;; (al/load "sound")
;; (al/load "settings")
;; (al/load "visual")

;;; init.lisp ends here
