#+title: Scripts
#+SETUPFILE: ../styles/read-the-org.org
#+OPTIONS: auto-id:t
#+HTML_HEAD_EXTRA: <meta name="description" content="ebeem’s Helper Scripts" />
#+HTML_HEAD_EXTRA: <meta property="og:title" content="ebeem’s Helper Scripts" />
#+HTML_HEAD_EXTRA: <meta property="og:description" content="Description of the helper scripts of ebeem" />

* Introduction

* Dotfiles
#+BEGIN_SRC sh :tangle ~/.bin/dotfiles :exports code :mkdirp yes
#!/bin/bash
full_path=$(realpath $0)
dir_path=~/dotfiles

pre_install() {
    # enable multilib (only needed for gaming machines, steam + wine)
    sudo sed -z -i 's|#\[multilib\]\n#Include = /etc/pacman.d/mirrorlist|\[multilib\]\nInclude = /etc/pacman.d/mirrorlist|g' /etc/pacman.conf

    # enable coloring and parallel download
    sudo sed -z -i 's|#Color|Color|g' /etc/pacman.conf
    sudo sed -z -i 's|#ParallelDownloads = 5|ParallelDownloads = 15|g' /etc/pacman.conf

    # installing AUR helper
    if ! command -v paru &> /dev/null;
    then
        echo "installing paru (AUR)"
        sudo pacman -S --needed base-devel git
        cd /tmp
        git clone https://aur.archlinux.org/paru.git
        cd paru
        makepkg --noprovides --nouseask --noconfirm -sicC
    fi
}

install() {
    # update available packages
    paru -Syu --noconfirm

    # install dependencies
    cd $dir_path/
    # makepkg --noconfirm -sifcC
    paru -Ui --noconfirm --cleanafter --rebuild
}

# $1 is the name of the service
enable_system_service() {
    if [ $(systemctl is-enabled $1) != 'enabled' ]
    then
        systemctl enable --now $1
    fi
}

# $1 is the name of the service
enable_user_service() {
    if [ $(systemctl --user is-enabled $1) != 'enabled' ]
    then
        systemctl --user enable --now $1
    fi
}

mail_setup() {
    if [ ! -e ~/.mail ];
    then
        echo "creating mail directory"
        mkdir ~/.mail
    fi
}

enable_theme() {
    $dir_path/.modules/colloid-gtk-theme/install.sh -c dark --tweaks nord
    $dir_path/.modules/colloid-icon-theme/install.sh -s nord
}

load_gnome_config() {
    dconf load /org/gnome/ < ../.gnome
}

post_install() {
    enable_system_service "ckb-next-daemon.service"
    enable_system_service "NetworkManager.service"
    enable_system_service "bluetooth.service"
    enable_user_service "mpd.service"
    enable_user_service "emacs.service"
    mail_setup
}

pre_install
install
post_install
# load_gnome_config
# enable_theme

cd $dir_path/
stow ./
#+END_SRC

* Update Wallpaper
#+BEGIN_SRC sh :tangle ~/.bin/update-wallpaper :exports code :mkdirp yes
#!/usr/bin/env bash

RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')"

DIR="~/.wallpapers"
HOUR=$(($(date +%k)))
STYLE=$(sed -nr "/^\[wallpaper\]/ { :l /^name[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}" ~/.config/dynamic-wallpaper/dwall.conf)

IMAGE="$DIR/$STYLE/$HOUR"

# get image format
if [[ -f "${IMAGE}.png" ]]; then
    FORMAT="png"
elif [[ -f "${IMAGE}.jpg" ]]; then
    FORMAT="jpg"
elif [[ -f "$DIR/fixed/$STYLE" ]]; then
    # allows setting a fixed wallpaper
    IMAGE="$DIR/fixed/${STYLE%%.*}"
    FORMAT=${STYLE##*.}
else
    echo -e ${RED}"[!] Invalid image file $IMAGE, Exiting..."
    exit 1;
fi

feh --bg-fill "$IMAGE.$FORMAT"
#+END_SRC

* Switch Keyboard Layout
#+BEGIN_SRC sh :tangle ~/.bin/switch-keyboard-layout :exports code :mkdirp yes
#!/usr/bin/env bash
(setxkbmap -query | grep -q 'layout:\s\+us') && setxkbmap ara || setxkbmap us
#+END_SRC
