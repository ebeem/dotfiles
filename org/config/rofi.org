#+title: Rofi Configuration
#+SETUPFILE: ../styles/read-the-org.org
#+OPTIONS: auto-id:t
#+HTML_HEAD_EXTRA: <meta name="description" content="ebeem’s Rofi Configuration" />
#+HTML_HEAD_EXTRA: <meta property="og:title" content="ebeem’s Rofi Configuration" />
#+HTML_HEAD_EXTRA: <meta property="og:description" content="Description of the rofi configuration of ebeem" />
#+PROPERTY: header-args:conf :exports code :mkdirp yes :tangle ~/.config/rofi/config.rasi

* Introduction
~Rofi~ started as a clone of ~simpleswitcher~, written by Sean Pringle - a popup window switcher roughly based on ~superswitcher~. ~Simpleswitcher~ laid the foundations, and therefore Sean Pringle deserves most of the credit for this tool. ~Rofi~ (renamed, as it lost the simple property) has been extended with extra features, like an application launcher and ssh-launcher, and can act as a drop-in dmenu replacement, making it a very versatile tool.

~Rofi~, like ~dmenu~, will provide the user with a textual list of options where one or more can be selected. This can either be running an application, selecting a window, or options provided by an external script.
https://github.com/davatorium/rofi

* Display Configuration
#+BEGIN_SRC conf
configuration {
  dpi:                        100;
  monitor:                    2;
  modi:                       "drun,run,filebrowser,window";
  show-icons:                 true;
  display-drun:               "";
  display-run:                "";
  display-filebrowser:        "";
  display-window:             "";
  drun-display-format:        "{name} [<span weight='light' size='small'><i>({generic})</i></span>]";
  window-format:              "{w} · {c} · {t}";
  case-sensitive:             false;
}
#+END_SRC

* Keybindings Configuration
My ~rofi~ configuration uses ~VI~ keybindings

#+BEGIN_SRC conf
configuration {
  kb-mode-complete:     "";
  kb-row-up:            "Up,Control+k,Shift+Tab,Shift+ISO_Left_Tab";
  kb-row-down:          "Down,Control+j";
  kb-accept-entry:      "Control+m,Return,KP_Enter";
  kb-remove-to-eol:     "Control+Shift+e";
  kb-mode-previous:     "Shift+Left,Control+Shift+Tab,Control+h";
  kb-mode-next:         "Shift+Right,Control+Tab,Control+l";
  kb-remove-char-back:  "BackSpace";
}
#+END_SRC

* Look and Feel
All colors and other configuration related to the look and feel that can be retrieved from ~Xresources~ should be placed here. This section will help us automate loading themes from ~Xresources~ which was deprecated since version ~1.7.0~

We provide a template that will be passed to an elisp to be processed

#+name: colors-configs
#+BEGIN_SRC conf
configuration {
    font:             "Iosevka SS14 Bold 12";
    terminal:         "alacritty";
}

 * {
    background:       #24273a;
    background-alt:   #494d64;
    foreground:       #cad3f5;
    selected:         #c6a0f6;
    active:           #c6a0f6;
    urgent:           #ed8796;
    border-color:     #c6a0f6;
    border-width:     1px solid;
    border-radius:    4px;

    handle-color:                var(selected);
    background-color:            var(background);
    foreground-color:            var(foreground);
    alternate-background:        var(background-alt);
    normal-background:           var(background);
    normal-foreground:           var(foreground);
    urgent-background:           var(urgent);
    urgent-foreground:           var(background);
    active-background:           var(active);
    active-foreground:           var(background);
    selected-normal-background:  var(selected);
    selected-normal-foreground:  var(background);
    selected-urgent-background:  var(active);
    selected-urgent-foreground:  var(background);
    selected-active-background:  var(urgent);
    selected-active-foreground:  var(background);
    alternate-normal-background: var(background);
    alternate-normal-foreground: var(foreground);
    alternate-urgent-background: var(urgent);
    alternate-urgent-foreground: var(background);
    alternate-active-background: var(active);
    alternate-active-foreground: var(background);
    background-color:            var(background-color);
}
#+END_SRC

#+name: xrdb-preprocessor
#+BEGIN_SRC emacs-lisp :tangle no :exports none :cache yes :noweb yes :mkdirp yes
(xresources-preprocessor "
<<colors-configs>>
")
#+END_SRC


#+BEGIN_SRC conf :noweb tangle :exports none
// <<xrdb-preprocessor()>>
#+END_SRC

* Main Window
#+BEGIN_SRC conf
window {
    transparency:                "real";
    location:                    center;
    anchor:                      center;
    fullscreen:                  false;
    width:                       50%;
    x-offset:                    10px;
    y-offset:                    40px;

    enabled:                     true;
    margin:                      0px;
    padding:                     0px;
    border:                      var(border-width);
    border-radius:               var(border-radius);
    cursor:                      "default";
}
#+END_SRC

* Main box
#+BEGIN_SRC conf
mainbox {
    enabled:                     true;
    spacing:                     10px;
    margin:                      0px;
    padding:                     40px;
    border:                      var(border-width);
    border-radius:               var(border-radius);
    border-color:                var(border-color);
    background-color:            transparent;
    children:                    [ "inputbar", "message", "listview", "mode-switcher" ];
}
#+END_SRC

* Prompt
#+BEGIN_SRC conf
inputbar {
    enabled:                     true;
    spacing:                     10px;
    margin:                      0px;
    padding:                     0px;
    background-color:            transparent;
    text-color:                  var(foreground-color);
    children:                    [ "prompt", "entry" ];
}

prompt {
    enabled:                     true;
    background-color:            inherit;
    text-color:                  inherit;
    text-color:                  var(selected);
}

textbox-prompt-colon {
    enabled:                     true;
    expand:                      false;
    str:                         "::";
    background-color:            inherit;
    text-color:                  inherit;
}

entry {
    enabled:                     true;
    background-color:            inherit;
    text-color:                  inherit;
    cursor:                      text;
    placeholder:                 "search...";
    placeholder-color:           inherit;
}
#+END_SRC

* Rows Filter
#+BEGIN_SRC conf
num-filtered-rows {
    enabled:                     true;
    expand:                      false;
    background-color:            inherit;
    text-color:                  inherit;
}

textbox-num-sep {
    enabled:                     true;
    expand:                      false;
    str:                         "/";
    background-color:            inherit;
    text-color:                  inherit;
}

num-rows {
    enabled:                     true;
    expand:                      false;
    background-color:            inherit;
    text-color:                  inherit;
}

case-indicator {
    enabled:                     true;
    background-color:            inherit;
    text-color:                  inherit;
}
#+END_SRC

* Listview
#+BEGIN_SRC conf
listview {
    enabled:                     true;
    columns:                     1;
    lines:                       12;
    cycle:                       true;
    dynamic:                     true;
    scrollbar:                   true;
    layout:                      vertical;
    reverse:                     false;
    fixed-height:                true;
    fixed-columns:               true;
    spacing:                     5px;
    margin:                      0px;
    padding:                     0px;
    background-color:            transparent;
    text-color:                  var(foreground-color);
    cursor:                      "default";
    border:                      0;
}
scrollbar {
    handle-width:                var(border-width);
    handle-color:                var(handle-color);
    background-color:            var(alternate-background);
}
#+END_SRC

* Elements
#+BEGIN_SRC conf
element {
    enabled:                     true;
    spacing:                     8px;
    margin:                      0px;
    padding:                     8px;
    background-color:            transparent;
    text-color:                  var(foreground-color);
    cursor:                      pointer;
}
element normal.normal {
    background-color:            var(normal-background);
    text-color:                  var(normal-foreground);
}
element normal.urgent {
    background-color:            var(urgent-background);
    text-color:                  var(urgent-foreground);
}
element normal.active {
    background-color:            var(active-background);
    text-color:                  var(active-foreground);
}
element selected.normal {
    background-color:            var(selected-normal-background);
    text-color:                  var(normal-background);
}
element selected.urgent {
    background-color:            var(selected-urgent-background);
    text-color:                  var(selected-urgent-foreground);
}
element selected.active {
    background-color:            var(selected-active-background);
    text-color:                  var(selected-active-foreground);
}
element alternate.normal {
    background-color:            var(alternate-normal-background);
    text-color:                  var(alternate-normal-foreground);
}
element alternate.urgent {
    background-color:            var(alternate-urgent-background);
    text-color:                  var(alternate-urgent-foreground);
}
element alternate.active {
    background-color:            var(alternate-active-background);
    text-color:                  var(alternate-active-foreground);
}
element-icon {
    background-color:            transparent;
    text-color:                  inherit;
    size:                        24px;
    cursor:                      inherit;
}
element-text {
    background-color:            transparent;
    text-color:                  inherit;
    highlight:                   inherit;
    cursor:                      inherit;
    vertical-align:              0.5;
    horizontal-align:            0.0;
}
#+END_SRC

* Mode Switcher
#+BEGIN_SRC conf
mode-switcher{
    enabled:                     true;
    spacing:                     10px;
    margin:                      0px;
    padding:                     0px;
    background-color:            transparent;
    text-color:                  var(foreground-color);
}
button {
    padding:                     8px;
    background-color:            var(alternate-background);
    text-color:                  inherit;
    cursor:                      pointer;
}
button selected {
    background-color:            var(selected-normal-background);
    text-color:                  var(selected-normal-foreground);
}
#+END_SRC

* Message
#+BEGIN_SRC conf
message {
    enabled:                     true;
    margin:                      0px;
    padding:                     0px;
    border:                      var(border-width);
    border-radius:               var(border-radius);
    border-color:                var(border-color);
    background-color:            var(background);
    text-color:                  var(foreground-color);
}

textbox {
    padding:                     8px;
    border:                      var(border-width);
    border-radius:               var(border-radius);
    border-color:                var(border-color);
    background-color:            var(alternate-background);
    text-color:                  var(foreground-color);
    vertical-align:              0.5;
    horizontal-align:            0.0;
    highlight:                   none;
    placeholder-color:           var(foreground-color);
    blink:                       true;
    markup:                      true;
}

error-message {
    background-color:            var(background);
    border:                      var(border-width);
    border-radius:               var(border-radius);
    border-color:                var(border-color);
    text-color:                  var(foreground-color);
}
#+END_SRC

* Right Menu Config

This configuration is used for ~sound output~ and ~power menu~. In general, it should be used for any rofi menu that should be placed on the right side of the screen.

#+BEGIN_SRC conf :tangle ~/.config/rofi/config-right-menu.rasi
@import                          "config.rasi"

#+END_SRC

* Scripts
** PowerMenu
#+BEGIN_SRC sh :tangle ~/.bin/rofi-powermenu :exports code :mkdirp yes
#!/bin/bash

# options to be displayed
option0="lock"
option1="logout"
option2="suspend"
option3="scheduled suspend (10min)"
option4="scheduled suspend (20min)"
option5="scheduled suspend (30min)"
option6="reboot"
option7="shutdown"

# options passed into variable
options="$option0\n$option1\n$option2\n$option3\n$option4\n$option5\n$option6\n$option7"

chosen="$(echo -e "$options" | rofi -lines 8 -dmenu -p "power" -config "~/.config/rofi/config-right-menu.rasi")"
case $chosen in
    $option0)
        i3lock;;
    $option1)
        i3-msg exit;;
    $option2)
        systemctl suspend;;
	$option3)
		sleep 600 && systemctl suspend;;
	$option4)
		sleep 1200 && systemctl suspend;;
	$option5)
		sleep 1800 && systemctl suspend;;
    $option6)
        systemctl reboot;;
	$option7)
        systemctl poweroff;;
esac
#+END_SRC

** Password Manager
#+BEGIN_SRC sh :tangle ~/.bin/rofi-password-manager :exports code :mkdirp yes
#!/usr/bin/env bash
IFS=$'\n'

if [ "$*" = "quit" ]
then
    exit 0
fi


options=""

for x in $(python ~/.secret/password-manager/main-terminal.py)
do
    options="${options}$(echo "$x"|xargs)\n"
done
selected="$(echo -e "$options" | rofi -dmenu -i -p "Account")"

if [ -n "$selected" ];
then
    python ~/.secret/password-manager/main-terminal.py "$selected" | xclip -sel clip
fi
#+END_SRC

** Sound Output
#+BEGIN_SRC sh :tangle ~/.bin/rofi-sound-output :exports code :mkdirp yes
#!/usr/bin/env bash
# Outputs have spaces in them, so let's make \n the IFS
IFS=$'\n'

# Menu will have a quit option, though you could just escape
if [ "$*" = "quit" ]
then
    exit 0
fi


# An option was passed, so let's check it
# the output from the selection will be the desciption.  Save that for alerts
rofi_command="rofi -dmenu -config '~/.config/rofi/config-right-menu.rasi'"
options=""
# Get the list of outputs based on the description, which is what makes sense to a human
# and is what we want to show in the menu
for x in $(pactl list sinks | grep -ie "description:"|cut -d: -f2)
do
    # outputs with cut may have spaces, so use empty xargs to remove them, and output that to the rofi list
    options="${options}$(echo "$x"|xargs)\n"
done
options="${options}quit"
selected="$(echo -e "$options" | rofi -dmenu -i -p "Sink Device" -config "~/.config/rofi/config-right-menu.rasi")"

# Figure out what the device name is based on the description passed
device=$(pactl list sinks|grep -C2 "Description: $selected"|grep Name|cut -d: -f2|xargs)
# Try to set the default to the device chosen
echo "$selected"

if [ -n "$selected" ];
then
    if pactl set-default-sink "$device"
        then
            dunstify -t 2000 -r 2 -u low "Activated: $selected"
        fi
fi
#+END_SRC

** Sound Input
#+BEGIN_SRC sh :tangle ~/.bin/rofi-sound-input :exports code :mkdirp yes
#!/usr/bin/env bash
# Outputs have spaces in them, so let's make \n the IFS
IFS=$'\n'

# Menu will have a quit option, though you could just escape
if [ "$*" = "quit" ]
then
    exit 0
fi


# An option was passed, so let's check it
# the output from the selection will be the desciption.  Save that for alerts
rofi_command="rofi -dmenu -config '~/.config/rofi/config-right-menu.rasi'"
options=""
# Get the list of outputs based on the description, which is what makes sense to a human
# and is what we want to show in the menu
for x in $(pactl list sources | grep -ie "description:"|cut -d: -f2)
do
    # outputs with cut may have spaces, so use empty xargs to remove them, and output that to the rofi list
    options="${options}$(echo "$x"|xargs)\n"
done
options="${options}quit"
selected="$(echo -e "$options" | rofi -dmenu -i -p "Source Device" -config "~/.config/rofi/config-right-menu.rasi")"


# Figure out what the device name is based on the description passed
device=$(pactl list sources|grep -C2 "Description: $selected"|grep Name|cut -d: -f2|xargs)
# Try to set the default to the device chosen
echo "$selected"

if [ -n "$selected" ];
then
    if pactl set-default-source "$device"
        then
            dunstify -t 2000 -r 2 -u low "Activated: $selected"
        fi
fi
#+END_SRC

** Keyboard Layout
#+BEGIN_SRC sh :tangle ~/.bin/rofi-keyboard-layout :exports code :mkdirp yes
#!/bin/bash

# options to be displayed
option0="English (US)"
option1="Arabic (SA)"

# options passed into variable
options="$option0\n$option1"

chosen="$(echo -e "$options" | rofi -lines 2 -dmenu -p "language")"
case $chosen in
    $option0)
        setxkbmap -layout "us";;
    $option1)
        setxkbmap -layout "ara";;
esac
#+END_SRC

** Finder
#+BEGIN_SRC sh :tangle ~/.bin/rofi-finder :exports code :mkdirp yes
#!/usr/bin/env bash

#PUT THIS FILE IN ~/.local/share/rofi/finder.sh
#USE: rofi  -show find -modi find:~/.local/share/rofi/finder.sh
if [ ! -z "$@" ]
then
  QUERY=$@
  if [[ "$@" == /* ]]
  then
    if [[ "$@" == *\?\? ]]
    then
      coproc ( exo-open "${QUERY%\/* \?\?}"  > /dev/null 2>&1 )
      exec 1>&-
      exit;
    else
      coproc ( exo-open "$@"  > /dev/null 2>&1 )
      exec 1>&-
      exit;
    fi
  elif [[ "$@" == \!\!* ]]
  then
    echo "!!-- Type your search query to find files"
    echo "!!-- To search again type !<search_query>"
    echo "!!-- To search parent directories type ?<search_query>"
    echo "!!-- You can print this help by typing !!"
  elif [[ "$@" == \?* ]]
  then
    echo "!!-- Type another search query"
    while read -r line; do
      echo "$line" \?\?
    done <<< $(find ~ -type d -path '*/\.*' -prune -o -not -name '.*' -type f -iname *"${QUERY#\?}"* -print)
  else
    echo "!!-- Type another search query"
    find ~ -type d -path '*/\.*' -prune -o -not -name '.*' -type f -iname *"${QUERY#!}"* -print
  fi
else
  echo "!!-- Type your search query to find files"
  echo "!!-- To seach again type !<search_query>"
  echo "!!-- To seach parent directories type ?<search_query>"
  echo "!!-- You can print this help by typing !!"
fi
#+END_SRC

** Bluetooth
#+BEGIN_SRC sh :tangle ~/.bin/rofi-bluetooth :exports code :mkdirp yes
#!/bin/bash

# Constants
divider="---------"
goback="Back"

# Checks if bluetooth controller is powered on
power_on() {
    if bluetoothctl show | grep -q "Powered: yes"; then
        return 0
    else
        return 1
    fi
}

# Toggles power state
toggle_power() {
    if power_on; then
        bluetoothctl power off
        show_menu
    else
        if rfkill list bluetooth | grep -q 'blocked: yes'; then
            rfkill unblock bluetooth && sleep 3
        fi
        bluetoothctl power on
        show_menu
    fi
}

# Checks if controller is scanning for new devices
scan_on() {
    if bluetoothctl show | grep -q "Discovering: yes"; then
        echo "Scan: on"
        return 0
    else
        echo "Scan: off"
        return 1
    fi
}

# Toggles scanning state
toggle_scan() {
    if scan_on; then
        kill $(pgrep -f "bluetoothctl scan on")
        bluetoothctl scan off
        show_menu
    else
        bluetoothctl scan on &
        echo "Scanning..."
        sleep 5
        show_menu
    fi
}

# Checks if controller is able to pair to devices
pairable_on() {
    if bluetoothctl show | grep -q "Pairable: yes"; then
        echo "Pairable: on"
        return 0
    else
        echo "Pairable: off"
        return 1
    fi
}

# Toggles pairable state
toggle_pairable() {
    if pairable_on; then
        bluetoothctl pairable off
        show_menu
    else
        bluetoothctl pairable on
        show_menu
    fi
}

# Checks if controller is discoverable by other devices
discoverable_on() {
    if bluetoothctl show | grep -q "Discoverable: yes"; then
        echo "Discoverable: on"
        return 0
    else
        echo "Discoverable: off"
        return 1
    fi
}

# Toggles discoverable state
toggle_discoverable() {
    if discoverable_on; then
        bluetoothctl discoverable off
        show_menu
    else
        bluetoothctl discoverable on
        show_menu
    fi
}

# Checks if a device is connected
device_connected() {
    device_info=$(bluetoothctl info "$1")
    if echo "$device_info" | grep -q "Connected: yes"; then
        return 0
    else
        return 1
    fi
}

# Toggles device connection
toggle_connection() {
    if device_connected $1; then
        bluetoothctl disconnect $1
        device_menu "$device"
    else
        bluetoothctl connect $1
        device_menu "$device"
    fi
}

# Checks if a device is paired
device_paired() {
    device_info=$(bluetoothctl info "$1")
    if echo "$device_info" | grep -q "Paired: yes"; then
        echo "Paired: yes"
        return 0
    else
        echo "Paired: no"
        return 1
    fi
}

# Toggles device paired state
toggle_paired() {
    if device_paired $1; then
        bluetoothctl remove $1
        device_menu "$device"
    else
        bluetoothctl pair $1
        device_menu "$device"
    fi
}

# Checks if a device is trusted
device_trusted() {
    device_info=$(bluetoothctl info "$1")
    if echo "$device_info" | grep -q "Trusted: yes"; then
        echo "Trusted: yes"
        return 0
    else
        echo "Trusted: no"
        return 1
    fi
}

# Toggles device connection
toggle_trust() {
    if device_trusted $1; then
        bluetoothctl untrust $1
        device_menu "$device"
    else
        bluetoothctl trust $1
        device_menu "$device"
    fi
}

# Prints a short string with the current bluetooth status
# Useful for status bars like polybar, etc.
print_status() {
    if power_on; then
        printf ''

        mapfile -t paired_devices < <(bluetoothctl paired-devices | grep Device | cut -d ' ' -f 2)
        counter=0

        for device in "${paired_devices[@]}"; do
            if device_connected $device; then
                device_alias=$(bluetoothctl info $device | grep "Alias" | cut -d ' ' -f 2-)

                if [ $counter -gt 0 ]; then
                    printf ", %s" "$device_alias"
                else
                    printf " %s" "$device_alias"
                fi

                ((counter++))
            fi
        done
        printf "\n"
    else
        echo ""
    fi
}

# A submenu for a specific device that allows connecting, pairing, and trusting
device_menu() {
    device=$1

    # Get device name and mac address
    device_name=$(echo $device | cut -d ' ' -f 3-)
    mac=$(echo $device | cut -d ' ' -f 2)

    # Build options
    if device_connected $mac; then
        connected="Connected: yes"
    else
        connected="Connected: no"
    fi
    paired=$(device_paired $mac)
    trusted=$(device_trusted $mac)
    options="$connected\n$paired\n$trusted\n$divider\n$goback\nExit"

    # Open rofi menu, read chosen option
    chosen="$(echo -e "$options" | $rofi_command "$device_name")"

    # Match chosen option to command
    case $chosen in
        "" | $divider)
            echo "No option chosen."
            ;;
        $connected)
            toggle_connection $mac
            ;;
        $paired)
            toggle_paired $mac
            ;;
        $trusted)
            toggle_trust $mac
            ;;
        $goback)
            show_menu
            ;;
    esac
}

# Opens a rofi menu with current bluetooth status and options to connect
show_menu() {
    # Get menu options
    if power_on; then
        power="Power: on"

        # Human-readable names of devices, one per line
        # If scan is off, will only list paired devices
        devices=$(bluetoothctl devices | grep Device | cut -d ' ' -f 3-)

        # Get controller flags
        scan=$(scan_on)
        pairable=$(pairable_on)
        discoverable=$(discoverable_on)

        # Options passed to rofi
        options="$devices\n$divider\n$power\n$scan\n$pairable\n$discoverable\nExit"
    else
        power="Power: off"
        options="$power\nExit"
    fi

    # Open rofi menu, read chosen option
    chosen="$(echo -e "$options" | $rofi_command "Bluetooth")"

    # Match chosen option to command
    case $chosen in
        "" | $divider)
            echo "No option chosen."
            ;;
        $power)
            toggle_power
            ;;
        $scan)
            toggle_scan
            ;;
        $discoverable)
            toggle_discoverable
            ;;
        $pairable)
            toggle_pairable
            ;;
        *)
            device=$(bluetoothctl devices | grep "$chosen")
            # Open a submenu if a device is selected
            if [[ $device ]]; then device_menu "$device"; fi
            ;;
    esac
}

# Rofi command to pipe into, can add any options here
rofi_command="rofi -dmenu -no-fixed-num-lines -yoffset -100 -i -p"

case "$1" in
    --status)
        print_status
        ;;
    *)
        show_menu
        ;;
esac
#+END_SRC
